
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##  VT::03.09.2016 - this will render the output independent
> ##  from the version of the package
> suppressPackageStartupMessages(library(tclust))
> 
> require(tclust)
> require(mvtnorm)
Loading required package: mvtnorm
> #--- EXAMPLE 1 ------------------------------------------
> 
> set.seed(123)
> sig <- diag (2)
> cen <- rep (1,2)
> x <- rbind(mvtnorm::rmvnorm(360, cen * 0,   sig),
+             mvtnorm::rmvnorm(540, cen * 5,   sig * 6 - 2),
+             mvtnorm::rmvnorm(100, cen * 2.5, sig * 50)
+            )
> 
> # Two groups and 10% trimming level
> (clus <- tclust (x, k = 2, alpha = 0.1, restr.fact = 8))
* Results for TCLUST algorithm: *
trim = 0.1, k = 2
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1
 [556] 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1
 [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1
 [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [852] 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1
 [889] 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 2 0 1 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0
 [926] 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0 0 0
 [963] 0 1 0 0 0 0 0 0 0 0 1 2 0 1 2 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
[1000] 0
Means:
         C 1         C 2
X 1 4.952001  0.08665503
X 2 5.153003 -0.08689752

Trimmed objective function:  -3750.043 
82% of iterations converged successfully.
> 
> 
> # Three groups (one of them very scattered) and 0% trimming level
> (clus <- tclust (x, k = 3, alpha=0.0, restr.fact = 100))
* Results for TCLUST algorithm: *
trim = 0, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1
 [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [852] 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [889] 1 1 1 1 1 1 1 1 1 1 1 1 3 1 3 1 3 3 1 2 1 1 3 3 1 3 1 2 3 1 3 3 3 1 3 3 3
 [926] 3 3 1 3 3 1 3 1 3 3 3 3 1 3 1 3 3 1 3 3 3 1 3 2 1 3 3 3 3 3 3 1 1 3 1 3 3
 [963] 1 1 3 1 3 3 3 3 3 1 1 2 3 1 2 3 1 3 3 1 3 3 3 3 3 3 3 3 3 3 1 3 3 3 3 3 1
[1000] 1
Means:
         C 1         C 2      C 3
X 1 4.964561  0.08222926 2.240668
X 2 5.155258 -0.07771533 2.274133

Trimmed objective function:  -4733.24 
76% of iterations converged successfully.
Warning message:
In .tclust.warn(O, O$ret) :
  The result is artificially constrained due to restr.fact = 100.
> 
> 
> #--- EXAMPLE 3 ------------------------------------------
> set.seed(123)
> data (M5data)
> x <- M5data[, 1:2]
> 
> (clus.a <- tclust (x, k = 3, alpha = 0.1, restr.fact =  1,
+                   restr = "eigen", equal.weights = TRUE, warnings = 1))
* Results for TCLUST algorithm: *
trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 2 3 1 2 3 3 1
 [371] 3 3 0 3 3 3 3 3 3 2 2 3 3 3 3 3 1 2 3 3 3 3 3 3 0 3 2 3 3 3 3 3 2 0 3 3 3
 [408] 3 3 2 3 3 3 3 3 2 2 3 1 3 3 1 2 3 3 3 3 3 2 3 2 3 1 2 1 3 3 3 3 2 3 3 2 1
 [445] 2 0 3 3 3 3 3 1 3 0 3 3 2 3 3 3 3 2 3 3 2 2 2 3 3 3 2 3 3 2 2 2 3 2 3 3 2
 [482] 2 3 3 3 3 3 3 3 3 3 3 3 2 1 2 3 3 3 3 3 3 3 3 3 1 3 3 2 2 3 3 3 0 0 2 3 3
 [519] 3 3 3 3 1 3 3 1 3 2 3 3 1 3 3 3 3 2 2 2 2 3 2 2 3 2 3 2 3 3 3 3 3 3 3 3 3
 [556] 3 3 3 2 3 3 3 1 3 3 3 2 1 3 3 3 2 1 3 2 3 3 0 2 3 3 2 3 3 0 3 3 3 3 1 3 3
 [593] 1 3 3 3 2 2 3 3 3 3 3 3 3 2 3 2 3 3 3 3 1 3 3 3 3 3 3 2 2 1 3 3 3 3 3 1 3
 [630] 3 3 2 3 3 2 3 3 3 3 2 3 0 3 3 3 2 2 3 3 3 2 0 1 3 3 3 3 3 3 2 3 3 0 3 3 3
 [667] 3 3 3 3 3 3 0 3 0 3 2 3 2 3 3 1 3 3 3 3 3 3 2 3 3 0 2 2 2 3 3 3 2 3 3 3 2
 [704] 3 2 1 3 2 3 3 0 3 3 2 3 3 3 2 3 3 3 2 3 0 2 2 3 2 0 3 3 3 3 2 3 3 3 2 2 1
 [741] 2 3 3 2 0 3 3 3 3 3 3 3 3 3 3 1 3 3 2 3 2 3 3 3 2 3 3 3 3 3 3 3 3 3 2 2 3
 [778] 3 3 3 2 3 3 2 3 3 3 0 3 3 2 1 3 3 2 3 3 2 3 1 2 3 0 3 2 3 2 3 3 2 3 0 3 3
 [815] 3 3 3 3 3 3 3 3 3 0 0 3 3 2 3 3 2 3 2 2 1 3 2 3 3 2 2 3 3 2 2 2 2 3 3 3 3
 [852] 3 3 3 3 0 2 3 3 3 3 3 2 0 1 3 2 2 3 3 3 3 3 2 3 3 3 3 3 3 2 2 3 2 3 3 1 3
 [889] 3 3 2 3 3 2 3 3 3 3 3 2 3 3 3 2 3 2 3 2 2 0 3 2 2 2 3 2 3 3 3 3 0 3 3 3 2
 [926] 3 3 3 2 3 1 3 2 3 2 3 3 3 3 2 3 1 3 3 3 3 3 3 3 2 3 3 0 2 2 3 2 2 3 1 3 2
 [963] 3 2 2 3 3 3 2 3 3 3 3 0 3 3 3 2 3 3 0 0 2 0 0 3 1 3 3 3 3 2 2 3 3 3 3 1 3
[1000] 2 3 3 3 1 2 3 2 3 2 3 2 1 1 3 3 3 3 3 3 3 3 2 3 2 3 3 3 2 3 3 3 3 3 2 2 2
[1037] 2 3 3 2 2 3 3 3 3 2 3 3 1 3 2 3 3 3 0 1 3 3 2 3 3 3 3 3 3 3 3 0 3 3 3 3 3
[1074] 2 3 2 3 3 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1
[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1148] 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1296] 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1333] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1
[1518] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 1 0 0 0 0 0 0
[1814] 0 2 0 0 1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 1 0 2 0 0 0 2 0 0 2 0 0 0 0
[1851] 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0
[1888] 2 1 2 0 0 0 0 0 0 1 0 0 0 0 0 0 2 2 1 0 0 0 0 0 0 0 2 0 0 0 0 1 1 2 0 0 0
[1925] 0 1 1 1 0 1 1 1 0 0 0 1 0 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 0 0
[1962] 0 0 2 0 0 0 0 0 0 2 0 1 0 0 0 0 0 1 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0
[1999] 0 0
Means:
        C 1       C 2      C 3
x -7.777440 0.3887642 10.46422
y -8.496549 7.3181737 -1.10711

Trimmed objective function:  -9899.122 
98% of iterations converged successfully.
> (clus.b <- tclust (x, k = 3, alpha = 0.1, restr.fact =  1,
+                     equal.weights = TRUE, warnings = 1))
* Results for TCLUST algorithm: *
trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 2 3 1 2 3 3 1
 [371] 3 3 0 3 3 3 3 3 3 2 2 3 3 3 3 3 1 2 3 3 3 3 3 3 0 3 2 3 3 3 3 3 2 0 3 3 3
 [408] 3 3 2 3 3 3 3 3 2 2 3 1 3 3 1 2 3 3 3 3 3 2 3 2 3 1 2 1 3 3 3 3 2 3 3 2 1
 [445] 2 0 3 3 3 3 3 1 3 0 3 3 2 3 3 3 3 2 3 3 2 2 2 3 3 3 2 3 3 2 2 2 3 2 3 3 2
 [482] 2 3 3 3 3 3 3 3 3 3 3 3 2 1 2 3 3 3 3 3 3 3 3 3 1 3 3 2 2 3 3 3 0 0 2 3 3
 [519] 3 3 3 3 1 3 3 1 3 2 3 3 1 3 3 3 3 2 2 2 2 3 2 2 3 2 3 2 3 3 3 3 3 3 3 3 3
 [556] 3 3 3 2 3 3 3 1 3 3 3 2 1 3 3 3 2 1 3 2 3 3 0 2 3 3 2 3 3 0 3 3 3 3 1 3 3
 [593] 1 3 3 3 2 2 3 3 3 3 3 3 3 2 3 2 3 3 3 3 1 3 3 3 3 3 3 2 2 1 3 3 3 3 3 1 3
 [630] 3 3 2 3 3 2 3 3 3 3 2 3 0 3 3 3 2 2 3 3 3 2 0 1 3 3 3 3 3 3 2 3 3 0 3 3 3
 [667] 3 3 3 3 3 3 0 3 0 3 2 3 2 3 3 1 3 3 3 3 3 3 2 3 3 0 2 2 2 3 3 3 2 3 3 3 2
 [704] 3 2 1 3 2 3 3 0 3 3 2 3 3 3 2 3 3 3 2 3 0 2 2 3 2 0 3 3 3 3 2 3 3 3 2 2 1
 [741] 2 3 3 2 0 3 3 3 3 3 3 3 3 3 3 1 3 3 2 3 2 3 3 3 2 3 3 3 3 3 3 3 3 3 2 2 3
 [778] 3 3 3 2 3 3 2 3 3 3 0 3 3 2 1 3 3 2 3 3 2 3 1 2 3 0 3 2 3 2 3 3 2 3 0 3 3
 [815] 3 3 3 3 3 3 3 3 3 0 0 3 3 2 3 3 2 3 2 2 1 3 2 3 3 2 2 3 3 2 2 2 2 3 3 3 3
 [852] 3 3 3 3 0 2 3 3 3 3 3 2 0 1 3 2 2 3 3 3 3 3 2 3 3 3 3 3 3 2 2 3 2 3 3 1 3
 [889] 3 3 2 3 3 2 3 3 3 3 3 2 3 3 3 2 3 2 3 2 2 0 3 2 2 2 3 2 3 3 3 3 0 3 3 3 2
 [926] 3 3 3 2 3 1 3 2 3 2 3 3 3 3 2 3 1 3 3 3 3 3 3 3 2 3 3 0 2 2 3 2 2 3 1 3 2
 [963] 3 2 2 3 3 3 2 3 3 3 3 0 3 3 3 2 3 3 0 0 2 0 0 3 1 3 3 3 3 2 2 3 3 3 3 1 3
[1000] 2 3 3 3 1 2 3 2 3 2 3 2 1 1 3 3 3 3 3 3 3 3 2 3 2 3 3 3 2 3 3 3 3 3 2 2 2
[1037] 2 3 3 2 2 3 3 3 3 2 3 3 1 3 2 3 3 3 0 1 3 3 2 3 3 3 3 3 3 3 3 0 3 3 3 3 3
[1074] 2 3 2 3 3 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1
[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1148] 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1296] 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1333] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1
[1518] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 1 0 0 0 0 0 0
[1814] 0 2 0 0 1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 1 0 2 0 0 0 2 0 0 2 0 0 0 0
[1851] 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0
[1888] 2 1 2 0 0 0 0 0 0 1 0 0 0 0 0 0 2 2 1 0 0 0 0 0 0 0 2 0 0 0 0 1 1 2 0 0 0
[1925] 0 1 1 1 0 1 1 1 0 0 0 1 0 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 0 0
[1962] 0 0 2 0 0 0 0 0 0 2 0 1 0 0 0 0 0 1 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0
[1999] 0 0
Means:
        C 1       C 2      C 3
x -7.777440 0.3887642 10.46422
y -8.496549 7.3181737 -1.10711

Trimmed objective function:  -9899.122 
94% of iterations converged successfully.
> (clus.c <- tclust (x, k = 3, alpha = 0.1, restr.fact =  1,
+                   restr = "deter", equal.weights = TRUE, iter.max = 100,
+ 		  warnings = 1))
* Results for TCLUST algorithm: *
trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 3 3 2 3 3 3
 [371] 3 3 0 3 3 3 3 2 3 2 2 3 3 3 3 3 1 2 3 3 3 3 3 3 0 3 2 3 3 3 3 3 2 0 3 3 3
 [408] 3 3 2 3 3 3 3 3 3 2 3 3 3 3 1 2 3 3 3 3 3 2 3 2 3 1 2 3 3 3 3 3 2 3 2 2 1
 [445] 2 0 3 3 3 3 3 1 3 0 3 3 3 3 3 2 3 2 3 3 2 2 2 3 3 2 2 3 3 2 2 2 3 2 2 3 2
 [482] 2 3 3 3 3 3 3 3 2 3 3 3 2 3 2 3 3 3 2 3 3 3 3 3 3 3 3 2 2 3 3 3 0 3 2 3 3
 [519] 3 3 3 3 1 3 3 1 3 3 3 3 3 3 3 3 3 2 2 3 2 3 2 2 3 2 3 2 3 2 3 3 3 2 3 3 2
 [556] 3 2 3 2 3 3 3 1 3 3 3 2 3 3 0 3 2 1 3 2 3 3 0 2 3 3 3 3 2 0 3 3 3 0 3 3 2
 [593] 1 3 3 2 2 2 3 3 3 3 3 2 3 2 3 2 3 3 3 3 1 3 3 3 3 3 3 2 3 1 3 3 3 3 3 3 3
 [630] 3 3 2 3 3 2 3 3 3 3 2 3 0 3 3 3 2 2 3 3 3 3 0 3 3 3 3 3 3 3 3 3 3 0 3 3 3
 [667] 3 3 3 3 3 3 0 2 0 3 2 3 2 3 3 1 3 3 3 3 3 2 2 3 3 0 3 2 2 3 3 2 2 3 3 3 2
 [704] 2 2 1 3 2 2 3 0 3 3 2 3 2 3 2 3 3 3 2 3 0 2 2 3 2 0 3 3 2 3 2 3 2 2 2 2 1
 [741] 2 3 3 2 0 3 3 3 3 3 3 3 3 3 3 1 3 3 2 3 2 3 3 3 2 3 3 2 3 3 3 3 3 3 2 2 3
 [778] 3 3 3 2 3 3 2 3 3 3 0 3 3 2 1 3 2 2 3 3 2 3 3 2 2 3 3 2 3 2 3 3 2 3 0 0 3
 [815] 3 3 3 3 3 3 2 3 3 0 0 2 3 2 3 3 3 3 2 2 1 3 2 3 2 2 2 3 3 2 0 2 2 3 3 3 3
 [852] 3 3 3 3 0 2 3 3 3 3 3 2 0 1 3 2 2 3 3 3 3 3 2 3 3 3 3 3 2 2 2 3 2 3 3 3 3
 [889] 3 3 2 2 3 2 3 3 2 0 3 2 3 3 2 2 3 2 3 2 2 0 3 2 2 3 3 2 3 3 3 3 0 3 3 3 2
 [926] 2 3 2 2 3 1 3 2 3 2 3 3 3 3 2 3 3 2 3 3 3 3 2 3 2 3 2 3 2 2 3 2 2 3 1 0 2
 [963] 3 2 2 3 3 3 2 3 3 3 3 0 3 3 3 2 3 0 0 0 3 1 0 3 1 3 3 2 3 2 2 3 3 3 3 3 3
[1000] 2 3 3 3 1 2 3 2 2 2 3 2 1 1 3 3 3 3 3 2 3 3 2 3 2 3 2 3 2 3 3 3 3 3 2 2 2
[1037] 2 3 3 2 3 3 3 3 2 2 3 3 1 3 2 3 3 3 0 2 3 2 2 3 3 3 3 3 2 3 3 0 3 3 2 3 3
[1074] 2 3 2 3 2 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1
[1518] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1
[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 2 0 0 0 1 0 0 0 0 0 0
[1814] 0 0 0 0 1 0 0 0 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 2 0 1 0 2 0 0 2 0 0 0 0
[1851] 0 1 0 1 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 2 0 0 1 0 0
[1888] 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 1 2 0 0 2
[1925] 0 1 1 1 0 0 0 1 0 0 0 1 0 2 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 1 0 0
[1962] 0 0 2 0 0 0 0 0 0 2 0 0 0 1 0 0 0 1 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0
[1999] 0 0
Means:
        C 1      C 2       C 3
x -7.953569 1.038084  9.960540
y -8.346524 7.294284 -1.867793

Trimmed objective function:  -9718.277 
100% of iterations converged successfully.
> (clus.d <- tclust (x, k = 3, alpha = 0.1, restr.fact = 50,
+                   restr = "eigen", equal.weights = FALSE))
* Results for TCLUST algorithm: *
trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
  [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
  [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [149] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [186] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [223] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [260] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [297] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [334] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2
 [371] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [408] 2 2 2 2 2 2 2 2 2 3 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 3 2 2 2 2 2 2 2 2 2 1
 [445] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [482] 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2
 [519] 2 2 2 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 0 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [556] 2 2 2 3 2 2 2 1 2 2 2 2 2 2 2 2 2 1 2 2 2 2 0 2 2 2 2 2 2 0 2 2 2 2 2 2 2
 [593] 1 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2
 [630] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [667] 2 2 2 2 2 2 2 2 0 2 2 2 3 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2
 [704] 2 2 1 2 2 2 2 0 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 1
 [741] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 0 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2
 [778] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 0 2 2
 [815] 2 2 2 2 2 2 2 2 2 0 0 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [852] 2 2 2 2 2 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2
 [889] 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 0 2 2 2 3
 [926] 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0
 [963] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2
[1000] 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 0 2 2 2 2 2 2 2 2 2 0 2 2
[1037] 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2
[1074] 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1
[1518] 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1
[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0
[1814] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
[1851] 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
[1888] 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0
[1925] 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0
[1962] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 2 0 0 0 0 0
[1999] 0 0
Means:
        C 1        C 2        C 3
x -8.007264  8.6605632 0.04397704
y -8.364590 -0.1056621 7.92670007

Trimmed objective function:  -11200.97 
66% of iterations converged successfully.
> 
> #--- EXAMPLE 4 ------------------------------------------
> set.seed(123)
> data (swissbank)
> # Two clusters and 8% trimming level
> (clus <- tclust (swissbank, k = 2, alpha = 0.08, restr.fact = 50))
* Results for TCLUST algorithm: *
trim = 0.08, k = 2
Classification (trimmed points are indicated by 0 ):
  [1] 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1
 [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1
[112] 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 0
[149] 2 2 2 2 2 2 2 2 2 2 2 0 0 0 2 2 2 2 0 0 2 2 0 2 2 2 2 2 2 2 2 0 2 0 2 2 2
[186] 2 0 2 2 2 2 0 2 0 2 2 2 2 2 2
Means:
                C 1       C 2
Length   215.001010 214.78000
Ht_Left  129.939394 130.26706
Ht_Right 129.724242 130.18353
IF_Lower   8.294949  10.84588
IF_Upper  10.191919  11.09882
Diagonal 141.483838 139.62941

Trimmed objective function:  -542.7962 
92% of iterations converged successfully.
> 
> # Three clusters and 0% trimming level
> (clus <- tclust (swissbank, k = 3, alpha = 0.0, restr.fact = 110))
* Results for TCLUST algorithm: *
trim = 0, k = 3
Classification (trimmed points are indicated by 0 ):
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1
 [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
[112] 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 3
[149] 2 2 2 2 2 2 2 2 2 2 2 3 3 3 2 2 2 2 3 3 2 2 3 2 2 2 2 2 2 2 2 3 2 3 2 2 2
[186] 2 3 2 2 2 2 3 2 3 2 2 2 2 2 2
Means:
                C 1       C 2       C 3
Length   214.969697 214.78000 215.05625
Ht_Left  129.940404 130.26706 130.46875
Ht_Right 129.715152 130.18353 130.24375
IF_Lower   8.308081  10.84588   8.69375
IF_Upper  10.157576  11.09882  11.31875
Diagonal 141.536364 139.62941 138.50625

Trimmed objective function:  -628.3746 
96% of iterations converged successfully.
> 
> 
> ##### Discriminant Factor Analysis for tclust Objects ############################
> sig <- diag (2)
> cen <- rep (1, 2)
> x <- rbind(mvtnorm::rmvnorm(360, cen * 0,   sig),
+ 	       mvtnorm::rmvnorm(540, cen * 5,   sig * 6 - 2),
+ 	       mvtnorm::rmvnorm(100, cen * 2.5, sig * 50)
+ )
> (clus.1 <- tclust (x, k = 2, alpha = 0.1, restr.fact = 12))
* Results for TCLUST algorithm: *
trim = 0.1, k = 2
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2
 [186] 2 2 2 0 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1
 [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [667] 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1
 [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [889] 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0
 [926] 0 1 0 0 0 2 1 0 1 0 0 0 0 0 0 0 0 1 2 0 0 2 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0
 [963] 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 2 0 0 1 0 0 0 0 0 1 0 0 0 1
[1000] 0
Means:
         C 1           C 2
X 1 5.042155 -0.0003362897
X 2 4.898478  0.0403511802

Trimmed objective function:  -3779.935 
82% of iterations converged successfully.
> 
> (clus.2 <- tclust (x, k = 3, alpha = 0.1, restr.fact = 1))
* Results for TCLUST algorithm: *
trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 3 1 1 1
 [371] 1 1 3 1 3 1 0 1 1 1 1 1 1 1 1 1 1 1 3 1 1 0 1 1 3 3 3 1 1 1 1 1 0 1 3 1 1
 [408] 3 1 3 1 1 1 1 1 3 1 1 1 1 1 3 1 3 3 3 3 0 3 3 1 1 3 1 3 1 1 3 0 1 1 1 1 1
 [445] 1 1 1 3 3 1 1 3 1 1 3 1 1 3 3 1 1 1 2 3 1 1 3 3 3 0 1 1 3 1 1 3 1 3 1 3 1
 [482] 1 1 1 3 1 3 1 1 3 1 1 3 1 1 3 0 1 3 1 1 1 1 3 3 1 1 1 3 1 1 1 1 3 1 3 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 3 3 1 0 1 1 1 0 1 3 1 1 3 1 1 1 3 3 3 1
 [556] 1 1 1 1 1 1 3 1 3 3 1 1 1 1 1 3 1 1 0 2 1 1 1 1 1 3 1 1 1 1 3 1 3 1 1 3 1
 [593] 1 1 1 3 3 1 1 1 1 3 1 1 1 3 1 1 3 1 1 1 1 1 1 3 3 1 3 1 3 1 3 1 1 1 1 1 1
 [630] 1 2 3 3 1 1 3 3 1 3 1 1 1 1 3 0 1 1 3 1 1 1 1 1 3 1 3 1 1 1 1 3 1 1 1 1 1
 [667] 1 1 1 1 3 1 0 1 0 1 3 1 1 3 1 1 0 1 1 1 1 1 3 1 1 1 1 1 1 1 1 3 1 1 1 1 1
 [704] 1 1 1 3 1 1 1 1 3 1 1 3 0 1 3 3 1 1 1 1 1 1 1 0 1 3 1 3 1 1 1 1 3 1 1 1 1
 [741] 1 1 1 1 3 1 3 1 1 1 1 1 3 1 3 1 1 3 1 1 1 1 1 3 1 1 1 1 3 1 1 1 1 3 3 1 1
 [778] 1 3 1 1 1 1 3 3 3 0 1 1 1 1 1 1 0 1 3 1 3 0 3 0 3 1 3 1 0 1 2 3 1 3 0 1 3
 [815] 3 3 1 3 3 3 1 1 1 1 1 3 1 1 1 1 1 3 1 0 3 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1
 [852] 1 1 1 1 1 1 1 1 3 1 1 1 1 3 1 3 1 1 1 1 1 1 2 1 1 0 1 1 1 3 3 1 1 1 1 1 1
 [889] 3 1 3 3 1 3 1 1 1 1 1 1 0 0 0 0 0 0 3 0 0 0 0 0 0 1 0 3 0 0 0 0 0 3 0 3 0
 [926] 0 2 0 0 0 2 3 0 3 0 0 0 0 0 0 0 0 3 2 0 0 2 0 0 0 0 0 1 0 2 3 0 0 0 0 0 0
 [963] 3 2 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 2 0 0 3 0 0 0 0 0 1 0 0 0 1
[1000] 0
Means:
         C 1        C 2      C 3
X 1 4.384051 0.04308565 7.070885
X 2 5.691407 0.06814548 2.632401

Trimmed objective function:  -3887.154 
86% of iterations converged successfully.
Warning message:
In .tclust.warn(O, O$ret) :
  The result is artificially constrained due to restr.fact = 1.
>   ##  restr.fact and k are chosen improperly for pointing out the
>   ##    difference in the plot of DiscrFact
> 
> (dsc.1 <- DiscrFact (clus.1))
Mean overall discriminant factor: -23.02189 
Mean discriminant factor per cluster:
        O         1         2 
-14.22857 -31.63610 -12.43650 
28 decisions are considered as doubtful
> (dsc.2 <- DiscrFact (clus.2))
Mean overall discriminant factor: -10.54408 
Mean discriminant factor per cluster:
         O          1          2          3 
-17.802437  -6.045219 -15.682364  -4.226602 
133 decisions are considered as doubtful
> 
> 
> 
> 
> ########## Classification Trimmed Likelihood Curves  ###################
> 
> ## Do not run - it takes too long and can show differences on some
> ##  architectures due to the random numbers.
> ##
> if(FALSE)
+ {
+ #--- EXAMPLE 1 ------------------------------------------
+ 
+     sig <- diag (2)
+     cen <- rep (1, 2)
+     x <- rbind(mvtnorm::rmvnorm(108, cen * 0,   sig),
+     	       mvtnorm::rmvnorm(162, cen * 5,   sig * 6 - 2),
+     	       mvtnorm::rmvnorm(30, cen * 2.5, sig * 50)
+     )
+ 
+     (ctl <- ctlcurves (x, k = 1:4))
+ 
+ }
> 
> #--- EXAMPLE 2 ------------------------------------------
> 
> data (geyser2)
> (ctl <- ctlcurves (geyser2, k = 1:5))
Depending on arguments x, k and alpha, this function needs some time to compute.
(Remove this message by setting "trace = 0")
Computed 30 solutions (chosen restr.fact = 50).

   alpha
k   0 0.04 0.08 0.12 0.16 0.2
  1                          
  2                          
  3                          
  4             *            
  5        k    *k   *k      

(*) Identified 3 artificially restricted solutions.
(k) Identified 3 solutions with very small/dropped clusters.
> 
> proc.time()
   user  system elapsed 
  11.21    0.23   11.43 
